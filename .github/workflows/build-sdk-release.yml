name: Build SDK Release

on:
  push:
    tags:
      - 'v*'  # Run workflow on version tags, e.g. v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build SDK for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: cortexsdr_sdk_linux
          - os: macos-latest
            artifact_name: cortexsdr_sdk_macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libprotobuf-dev protobuf-compiler zlib1g-dev nlohmann-json3-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf zlib nlohmann-json

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DENABLE_ONNX=ON -DENABLE_PYTORCH=ON -DENABLE_TENSORFLOW=ON ..

      - name: Build SDK
        run: |
          cd build
          cmake --build . --target cortexsdr_sdk

      - name: Create SDK package
        run: |
          mkdir -p sdk_package/include
          mkdir -p sdk_package/lib
          cp src/ai_compression/api/cortex_sdk.h sdk_package/include/
          cp build/libcortexsdr_sdk.a sdk_package/lib/
          cp -r docs/SDK_USAGE.md sdk_package/
          cp LICENSE sdk_package/ || echo "No LICENSE file found"
          cd sdk_package
          tar -czvf ../${{ matrix.artifact_name }}.tar.gz .

      - name: Upload SDK package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cortexsdr_sdk_linux/cortexsdr_sdk_linux.tar.gz
            cortexsdr_sdk_macos/cortexsdr_sdk_macos.tar.gz
          draft: false
          prerelease: false
